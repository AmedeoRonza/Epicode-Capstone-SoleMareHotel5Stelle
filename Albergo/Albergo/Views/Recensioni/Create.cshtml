@model Albergo.Models.Recensioni

@{
    ViewBag.Title = "Create";
}
@Styles.Render("~/Content/css")

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <h4 style="margin-top:2rem;">Lascia la tua recensione!</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            @Html.LabelFor(model => model.Nome, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Nome, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Nome, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Cognome, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Cognome, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Cognome, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Voto, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownListFor(model => model.Voto, Enumerable.Range(1, 10).Select(x => new SelectListItem { Text = x.ToString(), Value = x.ToString() }), "", new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.Voto, "", new { @class = "text-danger" })
            </div>
        </div>


        <div class="form-group">
            @Html.LabelFor(model => model.TestoRecensione, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.TextAreaFor(model => model.TestoRecensione, new { @class = "form-control", rows = 4 }) <!-- rows = 4 determina l'altezza iniziale della textarea -->
                @Html.ValidationMessageFor(model => model.TestoRecensione, "", new { @class = "text-danger" })
            </div>
        </div>


        <div class="form-group" style="display: none;">
            @Html.LabelFor(model => model.Approvata, htmlAttributes: new { @class = "control-label col-md-2" })
            @Html.HiddenFor(model => model.Approvata, new { @Value = "false" })
            <span class="text-danger">In attesa di approvazione</span> <!-- Aggiungi un messaggio per indicare che la recensione è in attesa di approvazione -->
        </div>


        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Invia!" class="btn btn-primary mt-2" />
            </div>
        </div>
    </div>
}


@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
